---
import Badge from "./Badge.astro";
interface Props {
  title: string;
  content: string;
  imageNumber: number;
  badges: string[];
}

const { title, content, imageNumber, badges } = Astro.props;
---

<project-entry class="w-2/3 h-screen flex flex-col" data-image={imageNumber}>
  <div class="my-auto">
    <h2 class="text-3xl lg:text-5xl font-playfair font-bold text-cinnabar-700">
      {title}
    </h2>
    <div class="flex flex-row flex-wrap mt-4">
      {badges.map((badge) => <Badge text={badge} />)}
    </div>
    <p class="text-justify mt-4 font-roboto text-cinnabar-600 text-lg">
      {content}
    </p>
  </div>
</project-entry>

<script>
  import { UpdateLinkEvent } from "./updateLinkEvent";
  const updateLinkEvent = new UpdateLinkEvent("0", {
    bubbles: false,
    cancelable: false,
  });
  class ProjectEntry extends HTMLElement {
    observer: IntersectionObserver | undefined;
    imageNumber: string;
    image: HTMLImageElement;
    imageWrapper: HTMLDivElement;
    link: HTMLAnchorElement;
    static desktopMargin = "-20% 0px -80% 0px";
    constructor() {
      super();

      this.imageNumber = this.dataset.image ?? "0";

      this.imageWrapper = document.querySelector(
        `.project-image-wrapper-${this.imageNumber}`
      ) as HTMLDivElement;

      this.link = this.imageWrapper.querySelector(
        ":scope > a"
      ) as HTMLAnchorElement;

      this.image = document.querySelector(
        `.project-image-${this.imageNumber}`
      ) as HTMLImageElement;

      this.setUpObserver();

      window.addEventListener("resize", () => {
        if (this.observer) this.observer.disconnect();
        this.setUpObserver();
      });
    }

    private setUpObserver() {
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (!entry.isIntersecting) {
              this.imageWrapper.classList.remove("opacity-100");
              this.imageWrapper.classList.remove("z-1");
              this.imageWrapper.classList.add("opacity-0");

              this.image.classList.remove("scale-100");
              this.image.classList.add("scale-125");

              this.link.classList.add("pointer-events-none");
            } else {
              this.imageWrapper.classList.add("opacity-100");
              this.imageWrapper.classList.add("z-1");
              this.imageWrapper.classList.remove("opacity-0");

              this.image.classList.add("scale-100");
              this.image.classList.remove("scale-125");

              this.link.classList.remove("pointer-events-none");

              updateLinkEvent.activeImage = this.imageNumber;
              window.dispatchEvent(updateLinkEvent);
            }
          });
        },
        {
          rootMargin: ProjectEntry.desktopMargin,
        }
      );

      this.observer.observe(this);
    }
  }

  customElements.define("project-entry", ProjectEntry);
</script>
